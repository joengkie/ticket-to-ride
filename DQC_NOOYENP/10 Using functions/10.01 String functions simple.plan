<?xml version='1.0' encoding='UTF-8'?>
<purity-config xmlns:comm="http://www.ataccama.com/purity/comment" version="10.6.2.ga-2017-03-03">
	<references/>
	<component-mappings>
		<propertyMappings/>
	</component-mappings>

<!-- (Expressions) --><step id="Expressions" className="com.ataccama.dqc.tasks.expressions.ColumnAssigner" disabled="false" mode="NORMAL">
		<properties>
			<assignments>
				<assignment column="seq">
					<expression>sequence(1)

//see comments bellow for more info
// if not visible, display comments by clicking on (Show)</expression>
					<scorer>
						<scoringEntries>
							<scoringEntry score="0" explainAs="CA_CHANGED" explain="false" key="CA_CHANGED"/>
						</scoringEntries>
					</scorer>
					<comm:comment>sequence()  ..... generates numbers 0,1,2,3,4,.... (increments by one for each record)
sequence(1)..... generates numbers 1,2,3,4,....    (starting from 1)
sequence(1,2)... numbers 1,3,5,7....</comm:comment>
				</assignment>
				<assignment column="left3">
					<expression>left(src_full_name,3)
</expression>
					<scorer>
						<scoringEntries>
							<scoringEntry score="0" explainAs="CA_CHANGED" explain="false" key="CA_CHANGED"/>
						</scoringEntries>
					</scorer>
					<comm:comment>you can use also 

substr(src_full_name,0,3)

notice that in substr function we start counting from zero.</comm:comment>
				</assignment>
				<assignment column="replaced">
					<expression>iif(containsWord(src_full_name, &quot;John&quot;),
     replace(src_full_name, &quot;John&quot;, &quot;Charles&quot;),
     substituteAll(@&quot;[a-z]&quot;, &quot;x&quot;, src_full_name ))</expression>
					<scorer>
						<scoringEntries>
							<scoringEntry score="0" explainAs="CA_CHANGED" explain="false" key="CA_CHANGED"/>
						</scoringEntries>
					</scorer>
					<comm:comment>This sample demonstrates usage of three functions:

iif... logical - we ask whether the input src_full_name contains the word &quot;John&quot;
if yes ... then we use function replace - this function changes the word &quot;John&quot; to the word &quot;Charles&quot;
if no  ... then we use function substituteAll - this function replaces all occurrences of small letters by letter &quot;x&quot;.

Notice the usage of a regular expression in the substituteAll function. Regular expression [a-z] means all small letters
from a to z in the English alphabet. Symbol @ before is not necessary in this case, but if we use escape character - 
backslash (\) - as part of the regular expression, the @ symbol is very useful because we do not need to use 
double-escapes.</comm:comment>
				</assignment>
				<assignment column="param">
					<expression>decode(seq,
  1,
  &quot;Java: &quot;  + getParameterValue(&quot;system.java.version&quot;),
   2,
  &quot;User: &quot;  + getParameterValue(&quot;system.user.name&quot;),
  3,
  &quot;Operating system: &quot;  + getParameterValue(&quot;system.os.name&quot;) + &#39; &#39; + getParameterValue(&quot;system.os.version&quot;),
   4,
  &quot;My variable: &quot;  + getParameterValue(&quot;system.myVar&quot;) ,  // see comment how to use myVar
   &quot;default&quot;)

</expression>
					<scorer>
						<scoringEntries>
							<scoringEntry score="0" explainAs="CA_CHANGED" explain="false" key="CA_CHANGED"/>
						</scoringEntries>
					</scorer>
					<comm:comment>getParameterValue() returns current system properties. You may also specify a custom property and start a plan with it: -DpropertyName=&quot;Value&quot;

For example, to set up myVar with the value &quot;Monday,&quot; you should add   
         -DmyVar=&quot;Monday&quot;
into the plan-starting command. If you start the plan from the GUI, go to Run Configuration (available from small arrow by the RUN button) and add this to VM arguments in the Runtimes tab.</comm:comment>
				</assignment>
			</assignments>
		</properties>
		<visual-constraints bounds="48,168,-1,-1" layout="vertical"/>
	</step>
	<connection className="com.ataccama.dqc.model.elements.connections.StandardFlowConnection" disabled="false">
		<source step="Expressions" endpoint="out"/>
		<target step="More functions.txt" endpoint="in"/>
		<visual-constraints>
			<bendpoints/>
		</visual-constraints>
	</connection>



<!-- (More functions.txt) --><step id="More functions.txt" className="com.ataccama.dqc.tasks.io.text.write.TextFileWriter" disabled="false" mode="NORMAL">
		<properties useStringQualifierOnAllColumns="false" stringQualifier="&quot;" lineSeparator="\r\n" fieldSeparator=";" generateMetadata="true" fileName="../data/out/10.01 More_functions.csv" encoding="UTF-8" writeHeader="true" writeAllColumns="true" compression="NONE" stringQualifierEscape="&quot;">
			<columns/>
			<dataFormatParameters trueValue="true" falseValue="false" thousandsSeparator="" dateFormatLocale="en_US" dateTimeFormat="yyyy-MM-dd HH:mm:ss" decimalSeparator="." dayFormat="yyyy-MM-dd"/>
		</properties>
		<visual-constraints bounds="48,240,-1,-1" layout="vertical"/>
	</step>



<!-- (names) --><step id="names" className="com.ataccama.dqc.tasks.io.text.read.TextFileReader" disabled="false" mode="NORMAL">
		<properties stringQualifier="&quot;" lineSeparator="\r\n" fieldSeparator=";" lineMaxReadLength="65536" numberOfLinesInHeader="1" fileName="../data/in/names.csv" encoding="UTF-8" numberOfLinesInFooter="0" compression="NONE" stringQualifierEscape="&quot;">
			<columns>
				<textReaderColumn name="src_full_name" type="STRING" ignore="false"/>
			</columns>
			<dataFormatParameters trueValue="true" falseValue="false" thousandsSeparator="" dateFormatLocale="en_US" dateTimeFormat="yy-MM-dd HH:mm:ss" decimalSeparator="." dayFormat="yy-MM-dd"/>
			<errorHandlingStrategy rejectFileName="rejected.txt">
				<errorInstructions>
					<errorInstruction putToLog="true" errorType="EXTRA_DATA" dataStrategy="READ_POSSIBLE" putToReject="false"/>
					<errorInstruction putToLog="true" errorType="LONG_LINE" dataStrategy="STOP" putToReject="true"/>
					<errorInstruction putToLog="true" errorType="PROCESSING_ERROR" dataStrategy="STOP" putToReject="false"/>
					<errorInstruction putToLog="true" errorType="INVALID_DATE" dataStrategy="READ_POSSIBLE" putToReject="false"/>
					<errorInstruction putToLog="true" errorType="SHORT_LINE" dataStrategy="READ_POSSIBLE" putToReject="true"/>
					<errorInstruction putToLog="true" errorType="UNPARSABLE_FIELD" dataStrategy="NULL_VALUE" putToReject="false"/>
				</errorInstructions>
			</errorHandlingStrategy>
			<shadowColumns>
				<shadowColumnDef name="seq" type="INTEGER"/>
				<shadowColumnDef name="left3" type="STRING"/>
				<shadowColumnDef name="replaced" type="STRING"/>
				<shadowColumnDef name="param" type="STRING"/>
			</shadowColumns>
		</properties>
		<visual-constraints bounds="48,96,-1,-1" layout="vertical"/>
	</step>
	<connection className="com.ataccama.dqc.model.elements.connections.StandardFlowConnection" disabled="false">
		<source step="names" endpoint="out"/>
		<target step="Expressions" endpoint="in"/>
		<visual-constraints>
			<bendpoints/>
		</visual-constraints>
	</connection>



<modelComment bounds="24,24,433,49" borderColor="255,255,255" backgroundColor="128,255,128" foregroundColor="40,0,0">Plan Goals
The goal of this plan is to demonstrate various functions. </modelComment>



<modelComment bounds="120,288,409,134" borderColor="255,255,255" backgroundColor="219,219,219" foregroundColor="64,0,64">Some functions use regular expressions as parameters. You can
use the following syntax in these cases: @&quot;...&quot;

To test an expression click DEBUG to the right of the expression field.

For the complete set of available functions, see the
&quot;Expressions&quot; section in the Help &gt; Help Contents menu (use search).</modelComment>



<modelComment bounds="216,96,241,139" borderColor="255,255,255" backgroundColor="219,219,219" foregroundColor="64,0,64">There are many functions available in steps.
We use some of them in this plan:
    1. String functions: left, replace, find, 
   substituteAll, matches, trashNonDigits, 
    2. Conditional: iif, case, decode
    3. Logical: is in 
    4. Special: sequence, getParameterValue
Double-click the Column Assigner step 
to see how they are used.</modelComment>

</purity-config>