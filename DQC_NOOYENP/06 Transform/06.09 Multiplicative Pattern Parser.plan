<?xml version='1.0' encoding='UTF-8'?>
<purity-config version="10.6.2.ga-2017-03-03">
	<references/>
	<component-mappings>
		<propertyMappings/>
	</component-mappings>

<!-- (Multiplicative Pattern Parser) --><step id="Multiplicative Pattern Parser" className="com.ataccama.dqc.tasks.parse.MultiplicativePatternParserAlgorithm" disabled="false" mode="NORMAL">
		<properties fullTrashScope="true" trash="pur_trash" in="src_full_name" recordDescriptorColumn="rd_name" patternName="pat_name">
			<parserConfig>
				<components>
					<component definition="{LETTER}" name="INITIAL">
						<scorer>
							<scoringEntries>
								<scoringEntry score="0" explainAs="PPV_MISMATCH" explain="false" key="PPV_MISMATCH"/>
							</scoringEntries>
						</scorer>
					</component>
					<component storeValidatedInto="std_first_name" definition="{WORD:minLength=2,maxLength=100000,chars=&#39;[:letter:]&#39;}" storeParsedInto="pur_first_name_orig" name="FIRST_NAME">
						<scorer>
							<scoringEntries/>
						</scorer>
						<verifier maxErrors="1" wordSeparators=" " fileName="../data/ext/lkp/first_names.lkp" multiFileName="../data/ext/lkp/first_names.lkp" maxErrorRatio="1.0"/>
					</component>
					<component storeValidatedInto="std_last_name" definition="{WORD:minLength=2,maxLength=100000,chars=&#39;[:letter:]&#39;}" storeParsedInto="pur_last_name_orig" name="LAST_NAME">
						<scorer>
							<scoringEntries>
								<scoringEntry score="0" explainAs="PPV_MISMATCH" explain="true" key="PPV_MISMATCH"/>
							</scoringEntries>
						</scorer>
						<verifier maxErrors="0" wordSeparators=" " fileName="../data/ext/lkp/last_names.lkp" maxErrorRatio="1.0"/>
					</component>
				</components>
				<patternGroups>
					<patternGroup>
						<patterns>
							<pattern definition="{FIRST_NAME!}{LAST_NAME!}" priority="0" name="F! L!"/>
							<pattern definition="{FIRST_NAME!}{INITIAL}{LAST_NAME!}" priority="0" name="F! I  L!"/>
							<pattern definition="{FIRST_NAME!}{FIRST_NAME!}{LAST_NAME}" priority="0" name="F! F! L!"/>
							<pattern definition="{LAST_NAME!}{FIRST_NAME!}" priority="0" name="L! F!"/>
							<pattern definition="{LAST_NAME!}{INITIAL}{FIRST_NAME!}" priority="0" name="L! I  F!"/>
							<pattern definition="{LAST_NAME!}{FIRST_NAME!}{FIRST_NAME!}" priority="0" name="L! F! F!"/>
						</patterns>
					</patternGroup>
					<patternGroup>
						<patterns>
							<pattern definition="{FIRST_NAME}{LAST_NAME}" priority="0" name="F L"/>
							<pattern definition="{FIRST_NAME}{INITIAL}{LAST_NAME}" priority="0" name="F I  L"/>
							<pattern definition="{FIRST_NAME}{FIRST_NAME}{LAST_NAME}" priority="0" name="F F L"/>
							<pattern definition="{LAST_NAME}{FIRST_NAME}" priority="0" name="L F"/>
							<pattern definition="{LAST_NAME}{INITIAL}{FIRST_NAME}" priority="0" name="L I  F"/>
							<pattern definition="{LAST_NAME}{FIRST_NAME}{FIRST_NAME}" priority="0" name="L F F"/>
							<pattern definition="{FIRST_NAME}{LAST_NAME}{FIRST_NAME}" priority="0" name="F L F"/>
						</patterns>
					</patternGroup>
				</patternGroups>
			</parserConfig>
			<scorer>
				<scoringEntries>
					<scoringEntry score="0" explainAs="PP_NULL" explain="true" key="PP_NULL"/>
					<scoringEntry score="0" explainAs="PP_NO_PATTERN" explain="true" key="PP_NO_PATTERN"/>
					<scoringEntry score="0" explainAs="PP_MORE_PATTERNS" explain="true" key="PP_MORE_PATTERNS"/>
					<scoringEntry score="0" explainAs="PP_TRASH" explain="true" key="PP_TRASH"/>
				</scoringEntries>
			</scorer>
			<tokenizerConfig whiteSpaceDefinition="[:white:]">
				<types>
					<tokenType tokenStartCharacters="[:letter:]" tokenCharacters="[:letter:]"/>
					<tokenType tokenStartCharacters="[:digit:]" tokenCharacters="[:digit:]"/>
				</types>
			</tokenizerConfig>
		</properties>
		<visual-constraints bounds="48,168,-1,-1" layout="vertical"/>
	</step>
	<connection className="com.ataccama.dqc.model.elements.connections.StandardFlowConnection" disabled="false">
		<source step="Multiplicative Pattern Parser" endpoint="out"/>
		<target step="Results - MPP" endpoint="in"/>
		<visual-constraints>
			<bendpoints/>
		</visual-constraints>
	</connection>



<!-- (Results - MPP) --><step id="Results - MPP" className="com.ataccama.dqc.tasks.io.text.write.TextFileWriter" disabled="false" mode="NORMAL">
		<properties useStringQualifierOnAllColumns="false" stringQualifier="&quot;" lineSeparator="\r\n" fieldSeparator=";" generateMetadata="true" fileName="../data/out/06.09 Multiplicative_Pattern_Parser.csv" encoding="UTF-8" writeHeader="true" writeAllColumns="true" compression="NONE" stringQualifierEscape="&quot;">
			<columns/>
			<dataFormatParameters trueValue="true" falseValue="false" thousandsSeparator="" dateFormatLocale="en_US" dateTimeFormat="yyyy-MM-dd HH:mm:ss" decimalSeparator="." dayFormat="yyyy-MM-dd"/>
		</properties>
		<visual-constraints bounds="48,240,-1,-1" layout="vertical"/>
	</step>



<!-- (names) --><step id="names" className="com.ataccama.dqc.tasks.io.text.read.TextFileReader" disabled="false" mode="NORMAL">
		<properties stringQualifier="&quot;" lineSeparator="\r\n" fieldSeparator=";" lineMaxReadLength="65536" numberOfLinesInHeader="1" fileName="../data/in/names.csv" encoding="UTF-8" numberOfLinesInFooter="0" compression="NONE" stringQualifierEscape="&quot;">
			<columns>
				<textReaderColumn name="src_full_name" type="STRING" ignore="false"/>
			</columns>
			<dataFormatParameters trueValue="true" falseValue="false" thousandsSeparator="" dateFormatLocale="en_US" dateTimeFormat="yy-MM-dd HH:mm:ss" decimalSeparator="." dayFormat="yy-MM-dd"/>
			<errorHandlingStrategy rejectFileName="rejected.txt">
				<errorInstructions>
					<errorInstruction putToLog="true" errorType="EXTRA_DATA" dataStrategy="READ_POSSIBLE" putToReject="false"/>
					<errorInstruction putToLog="true" errorType="LONG_LINE" dataStrategy="STOP" putToReject="true"/>
					<errorInstruction putToLog="true" errorType="PROCESSING_ERROR" dataStrategy="STOP" putToReject="false"/>
					<errorInstruction putToLog="true" errorType="INVALID_DATE" dataStrategy="READ_POSSIBLE" putToReject="false"/>
					<errorInstruction putToLog="true" errorType="SHORT_LINE" dataStrategy="READ_POSSIBLE" putToReject="true"/>
					<errorInstruction putToLog="true" errorType="UNPARSABLE_FIELD" dataStrategy="NULL_VALUE" putToReject="false"/>
				</errorInstructions>
			</errorHandlingStrategy>
			<shadowColumns>
				<shadowColumnDef name="pur_first_name_orig" type="STRING"/>
				<shadowColumnDef name="pur_last_name_orig" type="STRING"/>
				<shadowColumnDef name="std_first_name" type="STRING"/>
				<shadowColumnDef name="std_last_name" type="STRING"/>
				<shadowColumnDef name="rd_name" type="STRING"/>
				<shadowColumnDef name="pur_trash" type="STRING"/>
				<shadowColumnDef name="pat_name" type="STRING"/>
			</shadowColumns>
		</properties>
		<visual-constraints bounds="48,96,-1,-1" layout="vertical"/>
	</step>
	<connection className="com.ataccama.dqc.model.elements.connections.StandardFlowConnection" disabled="false">
		<source step="names" endpoint="out"/>
		<target step="Multiplicative Pattern Parser" endpoint="in"/>
		<visual-constraints>
			<bendpoints/>
		</visual-constraints>
	</connection>



<modelComment bounds="24,24,457,70" borderColor="255,255,255" backgroundColor="128,255,128" foregroundColor="40,0,0">Plan Goals
The goal of this plan is to parse and validate names against a lookup file 
and return all possible matches, using the Multiclicative Pattern Parser step.</modelComment>



<modelComment bounds="264,96,265,241" borderColor="255,255,255" backgroundColor="219,219,219" foregroundColor="64,0,64">The Pattern parser is a more difficult step.
It is used to parse names
from one column. The goal is to separate
first name, last name and rest of name.
On the output is return of all possible matches.

Three components are defined in this example:
INITIAL - letter without verifiing.
FIRST_NAME - as multiword component (as name
can consist of more words) with verification 
against first_names.lkp. In this verification we allow
one difference (see the property Max Errors)
LAST_NAME - as a singleword component with 
verification against last_names.lkp

More patterns and different partition would be 
needed for real data.</modelComment>

</purity-config>