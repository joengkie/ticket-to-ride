<?xml version='1.0' encoding='UTF-8'?>
<purity-config version="10.6.2.ga-2017-03-03">
	<references/>
	<component-mappings>
		<propertyMappings/>
	</component-mappings>

<!-- (Find ZIP) --><step id="Find ZIP" className="com.ataccama.dqc.tasks.clean.RegexMatchingAlgorithm" disabled="false" mode="NORMAL">
		<properties expression="src_address" appendRegexNameColumn="false" appendRegexNameColumnSeparator=" ">
			<noMatchColumns/>
			<regExpressions>
				<regExpression pattern="[A-Z][0-9][A-Z] ?[0-9][A-Z][0-9]" name="ZIP" multiplicative="false" ignoreCase="true" partialMatch="true">
					<resultColumns>
						<regexOutputColumn name="pur_zip" substitution="$&amp;"/>
						<regexOutputColumn name="pur_address" substitution="$`$&#39; "/>
					</resultColumns>
				</regExpression>
			</regExpressions>
			<scorer explanationColumn="exp">
				<scoringEntries>
					<scoringEntry score="0" explainAs="STN_NULL" explain="true" key="STN_NULL"/>
					<scoringEntry score="0" explainAs="STN_MATCHED" explain="true" key="STN_MATCHED"/>
					<scoringEntry score="0" explainAs="STN_NOT_MATCHED" explain="true" key="STN_NOT_MATCHED"/>
				</scoringEntries>
			</scorer>
		</properties>
		<visual-constraints bounds="48,168,-1,-1" layout="vertical"/>
	</step>
	<connection className="com.ataccama.dqc.model.elements.connections.StandardFlowConnection" disabled="false">
		<source step="Find ZIP" endpoint="out"/>
		<target step="Find ZIP 2" endpoint="in"/>
		<visual-constraints>
			<bendpoints/>
		</visual-constraints>
	</connection>



<!-- (Find ZIP 2) --><step id="Find ZIP 2" className="com.ataccama.dqc.tasks.clean.RegexMatchingAlgorithm" disabled="false" mode="BYPASS">
		<properties expression="src_address" appendRegexNameColumn="false" appendRegexNameColumnSeparator=" ">
			<noMatchColumns/>
			<regExpressions>
				<regExpression pattern="([A-Z][0-9][A-Z]) ?([0-9][A-Z][0-9])" name="ZIP2" multiplicative="false" ignoreCase="true" partialMatch="true">
					<resultColumns>
						<regexOutputColumn name="pur_zip2" substitution="$1$2"/>
					</resultColumns>
				</regExpression>
			</regExpressions>
			<scorer explanationColumn="exp">
				<scoringEntries>
					<scoringEntry score="0" explainAs="STN_NULL" explain="true" key="STN_NULL"/>
					<scoringEntry score="0" explainAs="STN_MATCHED" explain="true" key="STN_MATCHED"/>
					<scoringEntry score="0" explainAs="STN_NOT_MATCHED" explain="true" key="STN_NOT_MATCHED"/>
				</scoringEntries>
			</scorer>
		</properties>
		<visual-constraints bounds="48,240,-1,-1" layout="vertical"/>
	</step>
	<connection className="com.ataccama.dqc.model.elements.connections.StandardFlowConnection" disabled="false">
		<source step="Find ZIP 2" endpoint="out"/>
		<target step="Results - RM" endpoint="in"/>
		<visual-constraints>
			<bendpoints/>
		</visual-constraints>
	</connection>



<!-- (Results - RM) --><step id="Results - RM" className="com.ataccama.dqc.tasks.io.text.write.TextFileWriter" disabled="false" mode="NORMAL">
		<properties useStringQualifierOnAllColumns="false" stringQualifier="&quot;" lineSeparator="\r\n" fieldSeparator=";" generateMetadata="true" fileName="../data/out/06.05 Regex_Matching.csv" encoding="UTF-8" writeHeader="false" writeAllColumns="true" compression="NONE" stringQualifierEscape="&quot;">
			<columns/>
			<dataFormatParameters trueValue="true" falseValue="false" thousandsSeparator="" dateFormatLocale="en_US" dateTimeFormat="yyyy-MM-dd HH:mm:ss" decimalSeparator="." dayFormat="yyyy-MM-dd"/>
		</properties>
		<visual-constraints bounds="48,312,-1,-1" layout="vertical"/>
	</step>



<!-- (party) --><step id="party" className="com.ataccama.dqc.tasks.io.text.read.TextFileReader" disabled="false" mode="NORMAL">
		<properties stringQualifier="&quot;" lineSeparator="\r\n" fieldSeparator=";" lineMaxReadLength="65536" numberOfLinesInHeader="1" fileName="../data/in/party.csv" encoding="UTF-8" numberOfLinesInFooter="0" compression="NONE" stringQualifierEscape="&quot;">
			<columns>
				<textReaderColumn name="src_name" type="STRING" ignore="false"/>
				<textReaderColumn name="src_gender" type="STRING" ignore="false"/>
				<textReaderColumn name="src_birth_date" type="STRING" ignore="false"/>
				<textReaderColumn name="src_sin" type="STRING" ignore="false"/>
				<textReaderColumn name="src_card" type="STRING" ignore="false"/>
				<textReaderColumn name="src_address" type="STRING" ignore="false"/>
				<textReaderColumn name="src_email" type="STRING" ignore="false"/>
				<textReaderColumn name="src_primary_key" type="STRING" ignore="false"/>
				<textReaderColumn name="meta_last_update" type="STRING" ignore="false"/>
			</columns>
			<dataFormatParameters trueValue="true" falseValue="false" thousandsSeparator="" dateFormatLocale="en_US" dateTimeFormat="yy-MM-dd HH:mm:ss" decimalSeparator="." dayFormat="yy-MM-dd"/>
			<errorHandlingStrategy rejectFileName="rejected.txt">
				<errorInstructions>
					<errorInstruction putToLog="true" errorType="EXTRA_DATA" dataStrategy="READ_POSSIBLE" putToReject="false"/>
					<errorInstruction putToLog="true" errorType="LONG_LINE" dataStrategy="STOP" putToReject="true"/>
					<errorInstruction putToLog="true" errorType="PROCESSING_ERROR" dataStrategy="STOP" putToReject="false"/>
					<errorInstruction putToLog="true" errorType="INVALID_DATE" dataStrategy="READ_POSSIBLE" putToReject="false"/>
					<errorInstruction putToLog="true" errorType="SHORT_LINE" dataStrategy="READ_POSSIBLE" putToReject="true"/>
					<errorInstruction putToLog="true" errorType="UNPARSABLE_FIELD" dataStrategy="NULL_VALUE" putToReject="false"/>
				</errorInstructions>
			</errorHandlingStrategy>
			<shadowColumns>
				<shadowColumnDef name="pur_zip" type="STRING"/>
				<shadowColumnDef name="pur_zip2" type="STRING"/>
				<shadowColumnDef name="pur_address" type="STRING"/>
				<shadowColumnDef name="exp" type="STRING"/>
			</shadowColumns>
		</properties>
		<visual-constraints bounds="48,96,-1,-1" layout="vertical"/>
	</step>
	<connection className="com.ataccama.dqc.model.elements.connections.StandardFlowConnection" disabled="false">
		<source step="party" endpoint="out"/>
		<target step="Find ZIP" endpoint="in"/>
		<visual-constraints>
			<bendpoints/>
		</visual-constraints>
	</connection>



<modelComment bounds="24,24,577,54" borderColor="255,255,255" backgroundColor="128,255,128" foregroundColor="40,0,0">Plan Goals
The goal of this plan is to extract ZIP codes from Canadian address using the Regex Matching step.</modelComment>



<modelComment bounds="216,96,382,241" borderColor="255,255,255" backgroundColor="219,219,219" foregroundColor="64,0,64">Canadian ZIP codes have the &quot;ANA NAN&quot; structure
(A = letter, N = number, for example 
A1A 1A1).

This structure corresponds to the following regular expression:
[A-Z][0-9][A-Z] ?[0-9][A-Z][0-9]

The central part of the expression (the space with
question mark) means there can be one or
no spaces between the two parts, 
so both A1A 1A1 and A1A1A1 are accepted.

The step Find ZIP2 shows using a backreference 
in regular expressions. Right mouse click on it 
and uncheck Bypass.</modelComment>



<modelComment bounds="48,360,553,150" borderColor="255,255,255" backgroundColor="219,219,219" foregroundColor="64,0,64">Column Assigner can be used to remove spaces between ANA and NAN as well.
(see tutorial 06.04).

In the second RegExp we do it in a more complicated way directly in the Regex 
Matching step to demonstrate using back-references. 

The quickest way to understand them is to use the DEBUG button on the regular 
expression in the property dialog.</modelComment>

</purity-config>