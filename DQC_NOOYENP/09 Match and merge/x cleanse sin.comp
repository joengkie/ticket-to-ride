<?xml version='1.0' encoding='UTF-8'?>
<purity-config xmlns:comm="http://www.ataccama.com/purity/comment" version="10.6.2.ga-2017-03-03">
	<component-id>C4</component-id>
	<icon type="5">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</icon>
	<references/>
	<component-mappings>
		<propertyMappings/>
	</component-mappings>

<!-- (Add columns for SIN) --><step id="Add columns for SIN" className="com.ataccama.dqc.tasks.flow.AlterFormat" disabled="false" mode="NORMAL">
		<properties>
			<addedColumns>
				<addedColumn name="pur_sin" type="STRING"/>
				<addedColumn name="std_sin" type="STRING"/>
				<addedColumn name="out_sin" type="STRING"/>
				<addedColumn name="exp_sin" type="STRING"/>
				<addedColumn name="sco_sin" type="INTEGER"/>
			</addedColumns>
			<removedColumns/>
		</properties>
		<visual-constraints bounds="48,168,-1,-1" layout="vertical"/>
	</step>
	<connection className="com.ataccama.dqc.model.elements.connections.StandardFlowConnection" disabled="false">
		<source step="Add columns for SIN" endpoint="out"/>
		<target step="Remove extra chars " endpoint="in"/>
		<visual-constraints>
			<bendpoints/>
		</visual-constraints>
	</connection>



<!-- (Find  blacklist value) --><step id="Find  blacklist value" className="com.ataccama.dqc.tasks.clean.LookupAlgorithm" disabled="false" mode="NORMAL">
		<properties maxDifference="0" tableFileName="../data/ext/lkp/blacklist_sin.lkp" prefix="false" foreignKeyColumn="pur_sin">
			<columns/>
			<scorer explanationColumn="exp_sin" scoreColumn="sco_sin">
				<scoringEntries>
					<scoringEntry score="0" explainAs="LKP_NULL_ID" explain="false" key="LKP_NULL_ID"/>
					<scoringEntry score="0" explainAs="LKP_NOT_FOUND" explain="false" key="LKP_NOT_FOUND"/>
					<scoringEntry score="10000" explainAs="SIN_ON_BLACKLIST" explain="true" key="LKP_FOUND"/>
					<scoringEntry score="0" explainAs="LKP_FOUND_DUPL" explain="false" key="LKP_FOUND_DUPL"/>
					<scoringEntry score="0" explainAs="LKP_APPROX_USED" explain="false" key="LKP_APPROX_USED"/>
				</scoringEntries>
			</scorer>
			<selectBestMatch/>
		</properties>
		<visual-constraints bounds="48,312,-1,-1" layout="vertical"/>
	</step>
	<connection className="com.ataccama.dqc.model.elements.connections.StandardFlowConnection" disabled="false">
		<source step="Find  blacklist value" endpoint="out"/>
		<target step="Social Insurance Number" endpoint="in"/>
		<visual-constraints>
			<bendpoints/>
		</visual-constraints>
	</connection>



<!-- (Remove columns) --><step id="Remove columns" className="com.ataccama.dqc.tasks.flow.AlterFormat" disabled="false" mode="NORMAL">
		<properties>
			<addedColumns/>
			<removedColumns>
				<columnRef name="pur_sin"/>
			</removedColumns>
		</properties>
		<visual-constraints bounds="48,528,-1,-1" layout="vertical"/>
	</step>
	<connection className="com.ataccama.dqc.model.elements.connections.StandardFlowConnection" disabled="false">
		<source step="Remove columns" endpoint="out"/>
		<target step="out" endpoint="in"/>
		<visual-constraints>
			<bendpoints/>
		</visual-constraints>
	</connection>



<!-- (Remove extra chars ) --><step id="Remove extra chars " className="com.ataccama.dqc.tasks.expressions.ColumnAssigner" disabled="false" mode="NORMAL">
		<properties>
			<assignments>
				<assignment column="pur_sin">
					<expression>src_sin
</expression>
					<scorer>
						<scoringEntries>
							<scoringEntry score="0" explainAs="CA_CHANGED" explain="false" key="CA_CHANGED"/>
						</scoringEntries>
					</scorer>
					<comm:comment>Initial assigment</comm:comment>
				</assignment>
				<assignment column="pur_sin">
					<expression>trashNonDigits(pur_sin)
</expression>
					<scorer explanationColumn="exp_sin" scoreColumn="sco_sin">
						<scoringEntries>
							<scoringEntry score="10" explainAs="SIN_EXTRACHAR" explain="true" key="CA_CHANGED"/>
						</scoringEntries>
					</scorer>
					<comm:comment>Removes all non digit characters. We use pur_sin as the input, because if the value changes, the scoring &quot;SIN_EXTRACHAR&quot; will be used.</comm:comment>
				</assignment>
				<assignment column="pur_sin">
					<expression>iif( 
	length(trashNonDigits(pur_sin)) &gt; 0
	AND	
	length(trashNonDigits(pur_sin) ) &lt; 9
	AND 
	not matches(@&quot;[0]\{1,}&quot;, trashNonDigits(pur_sin))
	,
		substr(&#39;00000000&#39; + pur_sin, -9),
		pur_sin
	)</expression>
					<scorer explanationColumn="exp_sin" scoreColumn="sco_sin">
						<scoringEntries>
							<scoringEntry score="10" explainAs="SIN_EXTENDED_BY_ZEROS" explain="true" key="CA_CHANGED"/>
						</scoringEntries>
					</scorer>
					<comm:comment>If the source sin number is shorter than 9 digits but contains at least 1 digit, it is extended by zero characters from the left. 
The reason is that missing leading zero characters might have been removed in the source system or transformation. This example does not repair any kind of dummy or null values.</comm:comment>
				</assignment>
			</assignments>
		</properties>
		<visual-constraints bounds="48,240,-1,-1" layout="vertical"/>
	</step>
	<connection className="com.ataccama.dqc.model.elements.connections.StandardFlowConnection" disabled="false">
		<source step="Remove extra chars " endpoint="out"/>
		<target step="Find  blacklist value" endpoint="in"/>
		<visual-constraints>
			<bendpoints/>
		</visual-constraints>
	</connection>



<!-- (SIN out) --><step id="SIN out" className="com.ataccama.dqc.tasks.expressions.ColumnAssigner" disabled="false" mode="NORMAL">
		<properties>
			<assignments>
				<assignment expression="nvl(std_sin)" column="out_sin">
					<scorer>
						<scoringEntries>
							<scoringEntry score="0" explainAs="CA_CHANGED" explain="false" key="CA_CHANGED"/>
						</scoringEntries>
					</scorer>
				</assignment>
				<assignment expression="iif(containsWord(exp_sin, &quot;SIN_ON_BLACKLIST&quot;), &quot;&quot;,out_sin)" column="out_sin">
					<scorer>
						<scoringEntries>
							<scoringEntry score="0" explainAs="CA_CHANGED" explain="false" key="CA_CHANGED"/>
						</scoringEntries>
					</scorer>
				</assignment>
				<assignment expression="iif(containsWord(exp_sin, &quot;SIN_ON_BLACKLIST&quot;), &quot;&quot;,std_sin)" column="std_sin">
					<scorer>
						<scoringEntries>
							<scoringEntry score="0" explainAs="CA_CHANGED" explain="false" key="CA_CHANGED"/>
						</scoringEntries>
					</scorer>
				</assignment>
			</assignments>
		</properties>
		<visual-constraints bounds="48,456,-1,-1" layout="vertical"/>
	</step>
	<connection className="com.ataccama.dqc.model.elements.connections.StandardFlowConnection" disabled="false">
		<source step="SIN out" endpoint="out"/>
		<target step="Remove columns" endpoint="in"/>
		<visual-constraints>
			<bendpoints/>
		</visual-constraints>
	</connection>



<!-- (Social Insurance Number) --><step id="Social Insurance Number" className="com.ataccama.dqc.tasks.clean.ca.SINValidatorAlgorithm" disabled="false" mode="NORMAL">
		<properties preserveInputValue="false" sin="pur_sin" omitInvalidSIN="true" sinOut="std_sin">
			<scorer explanationColumn="exp_sin" scoreColumn="sco_sin">
				<scoringEntries>
					<scoringEntry score="10000" explainAs="SIN_MISSING" explain="true" key="SV_SIN_MISSING"/>
					<scoringEntry score="10000" explainAs="SIN_INVALID_LENGTH" explain="true" key="SV_INVALID_LENGTH"/>
					<scoringEntry score="10000" explainAs="SIN_INVALID_CHECK" explain="true" key="SV_INVALID_CHECK"/>
				</scoringEntries>
			</scorer>
			<comm:comment>Canadian Social Insurance Number is validated by using the Luhn Algorithm.</comm:comment>
		</properties>
		<visual-constraints bounds="48,384,-1,-1" layout="vertical"/>
	</step>
	<connection className="com.ataccama.dqc.model.elements.connections.StandardFlowConnection" disabled="false">
		<source step="Social Insurance Number" endpoint="out"/>
		<target step="SIN out" endpoint="in"/>
		<visual-constraints>
			<bendpoints/>
		</visual-constraints>
	</connection>



<!-- (in) --><step id="in" className="com.ataccama.dqc.tasks.common.usersteps.io.InputStep" disabled="false" mode="NORMAL">
		<properties>
			<columns>
				<columnDef name="src_sin" type="STRING"/>
			</columns>
			<shadowColumns/>
		</properties>
		<visual-constraints bounds="48,96,-1,-1" layout="vertical"/>
	</step>
	<connection className="com.ataccama.dqc.model.elements.connections.StandardFlowConnection" disabled="false">
		<source step="in" endpoint="out"/>
		<target step="Add columns for SIN" endpoint="in"/>
		<visual-constraints>
			<bendpoints/>
		</visual-constraints>
	</connection>



<!-- (out) --><step id="out" className="com.ataccama.dqc.tasks.common.usersteps.io.OutputStep" disabled="false" mode="NORMAL">
		<properties>
			<requiredColumns/>
		</properties>
		<visual-constraints bounds="48,600,-1,-1" layout="vertical"/>
	</step>



<modelComment bounds="24,24,625,49" borderColor="255,255,255" backgroundColor="128,255,128" foregroundColor="40,0,0">Component Goals
The goal of this component is to cleanse Social Insurance Numbers to be used in 09.01 Match and merge tutorial.</modelComment>



<modelComment bounds="240,168,468,217" borderColor="255,255,255" backgroundColor="219,219,219" foregroundColor="64,0,64">Extra characters (all non-digits) are removed. 
Blacklisted values are identified (&#39;123456789&#39;).
SINs are validated by the SIN Validator step.
Blacklisted SINs are removed.

Column prefixes:
out_ ... used for creating Golden records
std_ ... correct values - found in the lookup files or validated by business rules
src_ ... original values - never changed
sco_... (integer) measure of attribute quality
     0 ... correct at input
     &lt;10000 ... corrected
     &gt;=10000 ... invalid or null, cannot be used for matching or output values</modelComment>

</purity-config>