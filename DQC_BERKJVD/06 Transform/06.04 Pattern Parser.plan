<?xml version='1.0' encoding='UTF-8'?>
<purity-config xmlns:comm="http://www.ataccama.com/purity/comment" version="10.6.2.ga-2017-03-03">
	<references/>
	<component-mappings>
		<propertyMappings/>
	</component-mappings>

<!-- (Add columns) --><step id="Add columns" className="com.ataccama.dqc.tasks.flow.AlterFormat" disabled="false" mode="NORMAL">
		<properties>
			<addedColumns>
				<addedColumn name="exp" type="STRING"/>
				<addedColumn name="std_city" type="STRING"/>
				<addedColumn name="std_zip" type="STRING"/>
				<addedColumn name="std_province" type="STRING"/>
				<addedColumn name="pur_city" type="STRING"/>
				<addedColumn name="pur_zip" type="STRING"/>
				<addedColumn name="pur_street" type="STRING"/>
				<addedColumn name="pur_province" type="STRING"/>
				<addedColumn name="pat_address" type="STRING"/>
				<addedColumn name="pur_trash" type="STRING"/>
				<addedColumn name="pur_address" type="STRING"/>
			</addedColumns>
			<removedColumns/>
		</properties>
		<visual-constraints bounds="48,168,-1,-1" layout="vertical"/>
	</step>
	<connection className="com.ataccama.dqc.model.elements.connections.StandardFlowConnection" disabled="false">
		<source step="Add columns" endpoint="out"/>
		<target step="Remove space from ZIP code" endpoint="in"/>
		<visual-constraints>
			<bendpoints/>
		</visual-constraints>
	</connection>



<!-- (Parse addresses) --><step id="Parse addresses" className="com.ataccama.dqc.tasks.parse.PatternParserAlgorithm" disabled="false" mode="NORMAL">
		<properties fullTrashScope="true" trash="pur_trash" in="pur_address" patternName="pat_address">
			<parserConfig>
				<components>
					<component storeValidatedInto="std_zip" definition="{REGEXP:pattern=&quot;[A-Za-z][0-9][A-Za-z] ?[0-9][A-Za-z][0-9]&quot;}" storeParsedInto="pur_zip" name="ZIP">
						<scorer explanationColumn="exp">
							<scoringEntries>
								<scoringEntry score="0" explainAs="ZIP_NOT_VERIFIED" explain="true" key="PPV_MISMATCH"/>
							</scoringEntries>
						</scorer>
						<verifier maxErrors="0" wordSeparators=" " fileName="../data/ext/lkp/ca_zip.lkp" maxErrorRatio="1.0"/>
					</component>
					<component storeValidatedInto="std_city" definition="{MULTIWORD:minLength=2,chars=&#39;[:all:]]&#39;}" storeParsedInto="pur_city" name="CITY">
						<scorer explanationColumn="exp">
							<scoringEntries>
								<scoringEntry score="0" explainAs="GPV_MISMATCH" explain="false" key="PPV_MISMATCH"/>
							</scoringEntries>
						</scorer>
						<verifier maxErrors="1" wordSeparators=" " multiFileName="../data/ext/lkp/ca_city.lkp" maxErrorRatio="1.0">
							<comm:comment>Max Errors - we will tolerate one typo. See result for Marham --&gt; Markham</comm:comment>
						</verifier>
					</component>
					<component definition="{MULTIWORD:minLength=3,chars=&#39;[:all:]]&#39;}" storeParsedInto="pur_street" name="STREET">
						<scorer explanationColumn="exp">
							<scoringEntries>
								<scoringEntry score="0" explainAs="GPV_MISMATCH" explain="false" key="PPV_MISMATCH"/>
							</scoringEntries>
						</scorer>
					</component>
					<component storeValidatedInto="std_province" definition="{MULTIWORD:minLength=2,chars=&#39;[:letter:]]&#39;}" storeParsedInto="pur_province" name="PROVINCE">
						<scorer explanationColumn="exp">
							<scoringEntries>
								<scoringEntry score="0" explainAs="GPV_MISMATCH" explain="true" key="PPV_MISMATCH"/>
							</scoringEntries>
						</scorer>
						<verifier maxErrors="0" wordSeparators=" " fileName="../data/ext/lkp/ca_province.lkp" maxErrorRatio="1.0"/>
					</component>
				</components>
				<patternGroups>
					<patternGroup>
						<patterns>
							<pattern definition="{STREET},{CITY!},{PROVINCE!},{ZIP!}" priority="0" name="S,C!,P!,Z!"/>
							<pattern definition="{STREET},{ZIP!},{CITY!},{PROVINCE!}" priority="0" name="S,Z!,C!,P!"/>
							<pattern definition="{STREET},{ZIP!} {CITY!},{PROVINCE!}" priority="0" name="S,Z! C!,P!"/>
							<pattern definition="{PROVINCE!},{STREET},{ZIP!} {CITY!}" priority="0" name="P!,S,Z! C!"/>
							<pattern definition="{STREET},{PROVINCE!},{ZIP!},{CITY!}" priority="0" name="S,P!,Z!,C!"/>
						</patterns>
						<comm:comment>Four components, three verified (S, P!, C!, Z!)</comm:comment>
					</patternGroup>
					<patternGroup>
						<patterns>
							<pattern definition="{STREET},{CITY},{PROVINCE},{ZIP}" priority="0" name="S,C,P,Z"/>
							<pattern definition="{STREET},{ZIP},{CITY},{PROVINCE}" priority="0" name="S,Z,C,P"/>
							<pattern definition="{STREET},{ZIP} {CITY},{PROVINCE}" priority="0" name="S,Z C,P"/>
							<pattern definition="{PROVINCE},{STREET},{ZIP} {CITY}" priority="0" name="P,S,Z C"/>
							<pattern definition="{STREET},{PROVINCE},{ZIP},{CITY}" priority="0" name="S,P,Z,C"/>
						</patterns>
						<comm:comment>Four components, none verified (S, P, C, Z)</comm:comment>
					</patternGroup>
					<patternGroup>
						<patterns>
							<pattern definition="{STREET},{PROVINCE!},,{CITY!}" priority="0" name="S,P!,,C!"/>
							<pattern definition="{STREET},{CITY!},{PROVINCE!}," priority="0" name="S,C!,,P!"/>
							<pattern definition="{STREET},,{CITY!},{PROVINCE!}" priority="0" name="S,,C!,P!"/>
							<pattern definition="{STREET}, {CITY!},{PROVINCE!}" priority="0" name="S,C!,P!"/>
							<pattern definition="{PROVINCE!},{STREET},{CITY!}" priority="0" name="P!,S,C!"/>
						</patterns>
						<comm:comment>Three components, two verified (S, P!, C!,)</comm:comment>
					</patternGroup>
					<patternGroup>
						<patterns>
							<pattern definition="{STREET},,{CITY},{PROVINCE}" priority="0" name="S,,C,P"/>
							<pattern definition="{STREET},{PROVINCE},,{CITY}" priority="0" name="S,P,,C"/>
							<pattern definition="{STREET},{CITY},{PROVINCE}," priority="0" name="S, C, P,"/>
						</patterns>
						<comm:comment>Three components, none verified  with doubled comma (S, P,, C)</comm:comment>
					</patternGroup>
					<patternGroup>
						<patterns>
							<pattern definition="{STREET},{CITY},{PROVINCE}" priority="0" name="S,C,P"/>
							<pattern definition="{STREET},,{CITY},{PROVINCE}" priority="0" name="S,,C,P"/>
							<pattern definition="{PROVINCE},{STREET},{CITY}" priority="0" name="P,S,C"/>
							<pattern definition="{STREET},{PROVINCE},,{CITY}" priority="0" name="S,P,C"/>
						</patterns>
						<comm:comment>Three components, none verified (S, P, C,), without doubled comma</comm:comment>
					</patternGroup>
					<patternGroup>
						<patterns>
							<pattern definition="{STREET}{ZIP!}" priority="0" name="S Z!"/>
							<pattern definition="{STREET}{CITY!}" priority="0" name="S C!"/>
							<pattern definition="{CITY!}{STREET}" priority="0" name="C! S"/>
						</patterns>
						<comm:comment>Two components (S Z! or C! S)</comm:comment>
					</patternGroup>
				</patternGroups>
			</parserConfig>
			<scorer explanationColumn="exp">
				<scoringEntries>
					<scoringEntry score="0" explainAs="PP_NULL" explain="true" key="PP_NULL"/>
					<scoringEntry score="0" explainAs="PP_NO_PATTERN" explain="true" key="PP_NO_PATTERN"/>
					<scoringEntry score="0" explainAs="PP_MORE_PATTERNS" explain="true" key="PP_MORE_PATTERNS"/>
					<scoringEntry score="0" explainAs="PP_TRASH" explain="true" key="PP_TRASH"/>
				</scoringEntries>
			</scorer>
			<tokenizerConfig whiteSpaceDefinition="[:white:]">
				<types>
					<tokenType tokenStartCharacters="[:letter:][:digit:]" tokenCharacters="[:letter:][:digit:]"/>
				</types>
				<comm:comment>Default Tokenizer Config contains two types - here we have only one type. The reason is that in this case we want to treat A1A1A1 (zip code) as one token.</comm:comment>
			</tokenizerConfig>
		</properties>
		<visual-constraints bounds="48,312,-1,-1" layout="vertical"/>
	</step>
	<connection className="com.ataccama.dqc.model.elements.connections.StandardFlowConnection" disabled="false">
		<source step="Parse addresses" endpoint="out"/>
		<target step="Results" endpoint="in"/>
		<visual-constraints>
			<bendpoints/>
		</visual-constraints>
	</connection>



<!-- (Remove space from ZIP code) --><step id="Remove space from ZIP code" className="com.ataccama.dqc.tasks.expressions.ColumnAssigner" disabled="false" mode="NORMAL">
		<properties>
			<assignments>
				<assignment column="pur_address">
					<expression>substituteAll(@&quot;([A-Z][0-9][A-Z]) ?([0-9][A-Z][0-9])&quot;,&quot;$1$2&quot;,src_address)

//this is advanced usage of function substitute all. $1 stands for the first part or the regular expression - the first
//bracketed group. The second group has $2. There is optional space between these group in the reg. expression.
//As we do not have this space in the result this function will remove the space only from zip codes (or codes satisfying
//this regular expression)

//Test the full expression by Debug button on the left side.</expression>
					<scorer explanationColumn="exp">
						<scoringEntries>
							<scoringEntry score="0" explainAs="ZIP_SPACE_REMOVED" explain="true" key="CA_CHANGED"/>
						</scoringEntries>
					</scorer>
				</assignment>
			</assignments>
		</properties>
		<visual-constraints bounds="48,240,-1,-1" layout="vertical"/>
	</step>
	<connection className="com.ataccama.dqc.model.elements.connections.StandardFlowConnection" disabled="false">
		<source step="Remove space from ZIP code" endpoint="out"/>
		<target step="Parse addresses" endpoint="in"/>
		<visual-constraints>
			<bendpoints/>
		</visual-constraints>
	</connection>



<!-- (Results) --><step id="Results" className="com.ataccama.dqc.tasks.io.text.write.TextFileWriter" disabled="false" mode="NORMAL">
		<properties useStringQualifierOnAllColumns="false" stringQualifier="&quot;" lineSeparator="\r\n" fieldSeparator=";" generateMetadata="true" fileName="../data/out/06.04 Pattern_Parser.csv" encoding="UTF-8" writeHeader="true" writeAllColumns="false" compression="NONE" stringQualifierEscape="&quot;">
			<columns>
				<textWriterColumn name="src_address"/>
				<textWriterColumn name="pur_address"/>
				<textWriterColumn name="pur_street"/>
				<textWriterColumn name="pur_city"/>
				<textWriterColumn name="pur_zip"/>
				<textWriterColumn name="pat_address"/>
				<textWriterColumn name="pur_province"/>
				<textWriterColumn name="exp"/>
				<textWriterColumn name="pur_trash"/>
				<textWriterColumn name="std_city"/>
				<textWriterColumn name="std_zip"/>
				<textWriterColumn name="std_province"/>
			</columns>
			<dataFormatParameters trueValue="true" falseValue="false" thousandsSeparator="" dateFormatLocale="en_US" dateTimeFormat="yyyy-MM-dd HH:mm:ss" decimalSeparator="." dayFormat="yyyy-MM-dd"/>
		</properties>
		<visual-constraints bounds="48,384,-1,-1" layout="vertical"/>
	</step>



<!-- (addresses_one_column) --><step id="addresses_one_column" className="com.ataccama.dqc.tasks.io.text.read.TextFileReader" disabled="false" mode="NORMAL">
		<properties stringQualifier="&quot;" lineSeparator="\r\n" fieldSeparator=";" lineMaxReadLength="65536" numberOfLinesInHeader="1" fileName="../data/in/addresses_one_column.csv" encoding="UTF-8" numberOfLinesInFooter="0" compression="NONE" stringQualifierEscape="&quot;">
			<columns>
				<textReaderColumn name="src_address" type="STRING" ignore="false"/>
			</columns>
			<dataFormatParameters trueValue="true" falseValue="false" thousandsSeparator="" dateFormatLocale="en_US" dateTimeFormat="yy-MM-dd HH:mm:ss" decimalSeparator="." dayFormat="yy-MM-dd"/>
			<errorHandlingStrategy rejectFileName="rejected.txt">
				<errorInstructions>
					<errorInstruction putToLog="true" errorType="EXTRA_DATA" dataStrategy="READ_POSSIBLE" putToReject="false"/>
					<errorInstruction putToLog="true" errorType="LONG_LINE" dataStrategy="STOP" putToReject="true"/>
					<errorInstruction putToLog="true" errorType="PROCESSING_ERROR" dataStrategy="STOP" putToReject="false"/>
					<errorInstruction putToLog="true" errorType="INVALID_DATE" dataStrategy="READ_POSSIBLE" putToReject="false"/>
					<errorInstruction putToLog="true" errorType="SHORT_LINE" dataStrategy="READ_POSSIBLE" putToReject="true"/>
					<errorInstruction putToLog="true" errorType="UNPARSABLE_FIELD" dataStrategy="NULL_VALUE" putToReject="false"/>
				</errorInstructions>
			</errorHandlingStrategy>
			<shadowColumns/>
		</properties>
		<visual-constraints bounds="48,96,-1,-1" layout="vertical"/>
	</step>
	<connection className="com.ataccama.dqc.model.elements.connections.StandardFlowConnection" disabled="false">
		<source step="addresses_one_column" endpoint="out"/>
		<target step="Add columns" endpoint="in"/>
		<visual-constraints>
			<bendpoints/>
		</visual-constraints>
	</connection>



<modelComment bounds="24,24,529,54" borderColor="255,255,255" backgroundColor="128,255,128" foregroundColor="40,0,0">Plan Goals
The goal of this plan is to demonstrate address parsing using the Pattern Parser step.</modelComment>



<modelComment bounds="264,96,313,313" borderColor="255,255,255" backgroundColor="219,219,219" foregroundColor="64,0,64">Pattern Parser is a complex step.
It can be used for address parsing.
The goal of this example is to separate the ZIP
code, city and the rest of the address 
(the street part).

Three components are defined in this example:
ZIP - by regular expression with verification
in ZIP.lkp file.
CITY - as a multiword component (since 
a city name can consist of several words) 
with verification  against city_ca.lkp. In this 
verification we allow one difference 
(see the property Max Errors in the Verifier node)
STREET - as a multiword component without 
verification.

Many more patterns would be needed for real 
data.</modelComment>



<modelComment bounds="48,456,511,118" borderColor="255,255,255" backgroundColor="219,219,219" foregroundColor="64,0,64">Notice the special setting of the Tokenizer config in the Pattern Parser step. 
See more information in the step comment.

The optional spaces between parts of the ZIP code were removed by the 
substituteAll() function used in Column Assigner.

See tutorial 06.05 for more details about regular expressions for Canadian ZIP codes.</modelComment>

</purity-config>